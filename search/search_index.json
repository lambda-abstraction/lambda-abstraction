{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"what is this?","text":"<p>kinda like a personal blog/article page where i'll try to ocassionally write stuff.</p>"},{"location":"#about-me","title":"about me","text":"<p>im uh, lambda, you can find me in python discord sometimes. im interested in functional programming and types. bye</p>"},{"location":"python-typehints/","title":"introduction","text":""},{"location":"python-typehints/#who-is-this-for","title":"who is this for?","text":"<p>for people who already know the basics of python, and are interested in learning how to enhance their code with type annotations</p>"},{"location":"python-typehints/#what-are-typehints-what-do-they-do-and-dont","title":"what are typehints, what do they do (and dont)?","text":"<p>so, for the python interpreter itself, typehints are kind-of like comments that can be attached to variable assignments, function parameters, their return values, and instance / class attributes, but because of its dynamically typed nature, it was chosen for them to be allowed to be be any python expression, so:</p> <pre><code>x: [\"in theory\"] * 2 = \"this\"\ndef f(y: (\"is\", [2, 4])) -&gt; (lambda z: \"valid\"):\n    ...\nclass C:\n    attr: (\"python\", \"code\")\n</code></pre> <p>but in practice, typehints are optional indicators of types, so instead of arbitrary python expressions, we only use types (classes) (like <code>int</code>, <code>str</code>).</p> <p>to clear out some misconceptions, without using any tools, they:</p> <ul> <li>do not make your code run faster</li> <li>do not prevent from assigning a value of the wrong type to some variable</li> <li>do not make it impossible to call a function with the wrong set of parameters</li> </ul> <p>their usefulness comes largely from the typing ecosystem of libraries and tools built on top of the language, and the fact that they are introspectable (you can write code that would check the type annotations of something, and do something with them: a good example is the <code>@dataclasses.dataclass</code> decorator, that helps generating boilerplate stuff like <code>__init__</code> and <code>__repr__</code> from attribute annotations that are stored in the class's <code>__annotations__</code> attribute).</p> <p>the syntax for them (at the moment of python 3.12), is, like shown above:</p> <pre><code>variable_name: VariableType = value\n\ndef function_name(parameter: ParameterType) -&gt; ReturnType:\n    ...\n\nclass ClassName:\n    attribute_name: AttributeType\n</code></pre> <p>so, what meaning does this have in practice? well, its kind of like an unsigned contract that:</p> <ul> <li><code>variable_name</code> is believed to have a value of type <code>VariableType</code></li> <li><code>function_name</code> was designed to work when you call it with an argument of type   <code>ParameterType</code>, and is supposed to return a value of type <code>ReturnType</code></li> <li>instances of the <code>ClassName</code> class should have an attribute <code>attribute_name</code>   with a value of type <code>AttributeType</code></li> </ul> <p>tools, like typecheckers and IDE's can do a lot of stuff with this information</p> <p>for example, if you annotated <code>x</code> as a <code>str</code>, then you could get autocompletion of <code>str</code> methods on <code>x</code>, like, you could start typing <code>x.</code>, and stuff like <code>.split()</code> would be suggested</p> <p>typecheckers (like mypy and pyright) can verify that your code does work according to the typehints and doesn't try to access methods that dont exist on the type you annotated (e.g. you typehint <code>x</code> as an <code>int</code>, but try to <code>.split()</code> it: <code>int</code> doesnt have <code>split</code> defined, so it'd spot out this as a type error)</p>"}]}